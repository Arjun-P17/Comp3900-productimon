syntax = "proto3";
package productimon.svc;
option go_package = "git.yiad.am/productimon/proto/svc";

import "proto/common/common.proto";
import "proto/common/events.proto";

service DataAggregator {
  /* status */
  rpc Ping(DataAggregatorPingRequest) returns (DataAggregatorPingResponse);

  /* account */
  rpc Login(DataAggregatorLoginRequest) returns (DataAggregatorLoginResponse);
  rpc Signup(DataAggregatorSignupRequest) returns (DataAggregatorLoginResponse);
  rpc ExtendToken(common.Empty) returns (DataAggregatorLoginResponse);
  rpc UserDetails(common.Empty) returns (DataAggregatorUserDetailsResponse);
  rpc DeviceSignin(DataAggregatorDeviceSigninRequest)
      returns (DataAggregatorDeviceSigninResponse);

  /* events */
  rpc PushEvent(stream common.Event) returns (DataAggregatorPushEventResponse);
  rpc GetEvent(DataAggregatorGetEventRequest) returns (stream common.Event);

  /* analysis */
  rpc GetTime(DataAggregatorGetTimeRequest)
      returns (DataAggregatorGetTimeResponse);

  /* goals */
  rpc AddGoal(common.Goal) returns (common.Empty);
  rpc DeleteGoal(common.Goal) returns (common.Empty);
  rpc EditGoal(common.Goal) returns (common.Empty);
  // TODO: add filters
  rpc GetGoals(common.Empty) returns (DataAggregatorGetGoalsResponse);

  /* admin */
  rpc DeleteAccount(common.Empty)
      returns (common.Empty);  // this deletes the currently-logged in account
  rpc PromoteAccount(common.User) returns (common.Empty);
  rpc DemoteAccount(common.User) returns (common.Empty);
  rpc ListAdmins(common.Empty) returns (DataAggregatorListAdminsResponse);

  /* labels */
  rpc GetLabels(DataAggregatorGetLabelsRequest) returns (DataAggregatorGetLabelsResponse);
  rpc UpdateLabel(DataAggregatorUpdateLabelRequest) returns (common.Empty);
}

message DataAggregatorPingRequest {
  string payload = 1;
}

message DataAggregatorPingResponse {
  string payload = 1;
}

message DataAggregatorLoginRequest {
  string email = 1;
  string password = 2;
}

message DataAggregatorDeviceSigninRequest {
  common.Device device = 1;
}

message DataAggregatorDeviceSigninResponse {
  bytes cert = 1;
  bytes key = 2;
}

message DataAggregatorSignupRequest {
  common.User user = 1;
}

message DataAggregatorLoginResponse {
  string token = 1;
  common.User user = 2;
}

message DataAggregatorUserDetailsResponse {
  common.User user = 1;
  int64 last_eid = 2;
  common.Device device = 3;
}

message DataAggregatorPushEventResponse {
  common.Device device = 1;

  // how many events were added in this stream
  int64 count = 2;

  // latest event on the server for this device
  common.Event final_event = 3;
}

message DataAggregatorGetEventRequest {
  // returned zero or more events, or an error
  message ByDevice {
    common.Device device = 1;
  }

  // returnes either one event or an error
  message ById {
    common.Device device = 1;
    int64 id = 2;
  }

  // returned zero or more events, or an error
  message ByType {
    common.EventType type = 1;
  }

  oneof query {
    ByDevice by_device = 1;
    ById by_id = 2;
    ByType by_type = 3;
  }
}

message DataAggregatorGetTimeRequest {
  // all if empty
  repeated common.Device devices = 1;

  // lifetime if empty
  repeated common.Interval intervals = 2;

  enum GroupBy {
    INVALID = 0;
    APPLICATION = 1;
    LABEL = 2;
  }

  GroupBy group_by = 3;
}

message DataAggregatorGetTimeResponse {
  message RangeData {
    common.Interval interval = 1;
    message DataPoint {
      string app = 1;  // only populated if group_by = APPLICATION
      string label = 2;
      int64 time = 3;        // nanoseconds in duration
      int64 activetime = 4;  // nanoseconds in duration
    }
    repeated DataPoint data = 2;
  }
  repeated RangeData data = 1;
}

message DataAggregatorGetGoalsResponse {
  repeated common.Goal goals = 1;
}

message DataAggregatorListAdminsResponse {
  // TODO: change this to streaming API
  // group admins by chunk and implement pagination
  repeated common.User admins = 1;
}

message DataAggregatorGetLabelsRequest {
  // only admin can set this flag to get all labels for all users
  bool all_labels = 1;
}

message DataAggregatorGetLabelsResponse {
  repeated common.Label labels = 1;
}

message DataAggregatorUpdateLabelRequest {
  common.Label label = 1;
  bool all_labels = 2;
}
